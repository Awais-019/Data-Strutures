#include<iostream>
using namespace std;
template<typename T>

struct Node{
	T data;
	Node *next;
	Node(T data)
	{
		this->data = data;
		next = NULL;
	}
};
template<typename T>

class Singly_Linked_List{
	Node<T> *head;
	bool compare(T a, T b)
	{
		if(a > b)
		{
			return true;
		}
		return false;
	}
	void swap(Node<T> *a, Node<T> *b)
	{
		Node<T> *temp;
		temp = a;
		a = b;
		b = temp;
	}
	public:
	Singly_Linked_List()
	{
		head = NULL;
		cout << "List is created.\n\n" << endl;
	}	
	void insert_Start(T data)
	{
		Node<T> *new_Node = new Node<T>(data);
		if(head == NULL)
		{
			head = new_Node;
		}
		else
		{
			new_Node->next = head;
			head = new_Node;
		}
	}
	void insert_Last(T data)
	{
		Node<T> *new_Node = new Node<T>(data);
		if(head == NULL)
		{
			head = new_Node;
		}
		else{

			Node<T> *temp = head;
			while(temp->next != NULL)
			{
				temp = temp->next;
			}
			temp->next = new_Node;
		}
	}
	void insert_After(T data, int pos)
	{
		Node<T> *newNode = new Node<T>(data);
		Node<T> *temp = head;
		for(int i = 1; i < pos; i++)
		{
			temp = temp->next;
		}
		newNode->next = temp->next;
		temp->next = newNode;
	}
	void insert_Sort(T data)
	{
		Node<T> *newNode = new Node<T>(data);
		Node<T> *temp = head;
		if(head == NULL)
		{
			head = newNode;
		}
		else if(compare(temp->data, data))
		{
			newNode->next = head;
			head = newNode;
		}
		else
		{
		while(temp->next != NULL)
		{
				if((compare(temp->data, data)) && !(compare(temp->next->data, data)))
				{
					newNode->next = temp->next;
					temp->next = newNode;
					return;
				}
				temp = temp->next;
		}
		temp->next = newNode;
		}
	}
	
	void delete_Start()
	{
		if(head != NULL)
		{
		Node<T> *todelete = head;
		head = head->next;
		delete todelete;
		}
	}
	void delete_Last()
	{
		if(head != NULL)
		{
		Node<T> *cur = head;
		Node<T> *per = cur;
		while(cur->next != NULL)
		{
			per = cur;
			cur = cur->next;	
		}
		per->next = NULL;
		delete cur;
		}
	}
	void delete_After(int pos)
	{
		if(head != NULL)
		{
			Node<T> *temp = head;
			for(int i = 1; i < pos; i++)
			{
				temp = temp->next;
			}
			Node<T> *todelete = temp->next;
			temp->next = todelete->next;
			delete todelete;
		}
	}
	void sort()
	{
		if(head == NULL || head->next == NULL)
		{
			return;
		}
		else{
			Node<T> *temp = head;
			Node<T> *ptr;
			while(temp != NULL)
			{
				ptr = temp->next;
				while(ptr != NULL)
				{
					if(compare(temp->data, ptr->data))
					{
						if(temp == head)
						{
							Node<T> *cptr = head;
							while(cptr->next != ptr)
							{
								cptr = cptr->next;
							}
							cptr->next = temp;
							cptr = ptr->next;
							ptr->next = head->next;
							head->next = cptr;
							cptr = head;
							head = ptr;
							ptr = cptr;
							temp = head;
						}
						else{
							Node<T> *cptr = head;
							Node<T> *ctemp = head;
							while(cptr->next != ptr)
							{
								cptr = cptr->next;
							}
							while(ctemp->next != temp)
							{
								ctemp = ctemp->next;
							}
							ctemp->next = ptr;
							cptr->next = temp;
							cptr = ptr->next;
							ptr->next = temp->next;
							temp->next = cptr;
							ctemp = temp;
							temp = ptr;
							ptr = ctemp;	
						}
					}
					ptr = ptr->next;
				}
				
				temp = temp->next;
			}
		}
	}	
	bool search(T data)
	{
		Node<T> *temp = head;
		while(temp != NULL)
		{
			if(temp->data == data)
			{
				return true;
			}
			temp = temp->next;
		}
		return false;
	}
	void display()
	{
		Node<T> *temp = head;
		while(temp != NULL)
		{
			cout << temp->data << endl;
			temp = temp->next;
		}
	}
};


